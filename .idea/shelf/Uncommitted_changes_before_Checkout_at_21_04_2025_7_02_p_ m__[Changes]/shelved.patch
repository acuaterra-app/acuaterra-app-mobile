Index: app/src/main/java/com/example/monitoreoacua/fragments/FarmDetailsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.monitoreoacua.fragments;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.monitoreoacua.R;\r\nimport com.example.monitoreoacua.interfaces.OnFragmentInteractionListener;\r\nimport com.example.monitoreoacua.business.models.Farm;\r\n\r\n/**\r\n * Fragment that displays details of a farm\r\n */\r\npublic class FarmDetailsFragment extends Fragment {\r\n    private static final String ARG_FARM = \"farm\";\r\n\r\n    private Farm farm;\r\n    private OnFragmentInteractionListener mListener;\r\n\r\n    private TextView tvFarmName;\r\n    private TextView tvFarmAddress;\r\n    private TextView tvFarmCoordinates;\r\n    private TextView tvCreatedAt;\r\n    private Button btnEdit;\r\n    private Button btnDelete;\r\n    private Button btnModules;\r\n    private ImageView ivFarmImage;\r\n\r\n    public FarmDetailsFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n\r\n    public static FarmDetailsFragment newInstance(Farm farm) {\r\n        FarmDetailsFragment fragment = new FarmDetailsFragment();\r\n        Bundle args = new Bundle();\r\n        args.putParcelable(ARG_FARM, farm);\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        if (getArguments() != null) {\r\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {\r\n                farm = getArguments().getParcelable(ARG_FARM, Farm.class);\r\n            } else {\r\n                farm = getArguments().getParcelable(ARG_FARM);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_farm_details, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        \r\n        tvFarmName = view.findViewById(R.id.textViewFarmName);\r\n        tvFarmAddress = view.findViewById(R.id.textViewFarmAddress);\r\n        tvFarmCoordinates = view.findViewById(R.id.textViewFarmCoordinates);\r\n        tvCreatedAt = view.findViewById(R.id.textViewCreatedAt);\r\n        btnEdit = view.findViewById(R.id.buttonEditFarm);\r\n        btnDelete = view.findViewById(R.id.buttonDeleteFarm);\r\n        btnModules = view.findViewById(R.id.buttonModules);\r\n        ivFarmImage = view.findViewById(R.id.imageViewFarm);\r\n        \r\n        displayFarmDetails();\r\n        \r\n        setupClickListeners();\r\n        return view;\r\n    }\r\n\r\n    private void displayFarmDetails() {\r\n        Log.e(\"FarmDetailsFragment\", \"Displaying farm details: \" + farm);\r\n        if (farm != null) {\r\n            tvFarmName.setText(farm.getName());\r\n            tvFarmAddress.setText(farm.getAddress());\r\n            tvFarmCoordinates.setText(\"Lat: \" + farm.getLatitude() + \", Lng: \" + farm.getLongitude());\r\n            tvCreatedAt.setText(farm.getCreatedAt() != null ? farm.getCreatedAt().toString() : \"--\");\r\n            \r\n            // TODO: When image functionality is implemented in the Farm model, update this code\r\n            ivFarmImage.setImageResource(R.drawable.farmperfil);\r\n        }\r\n    }\r\n\r\n    private void setupClickListeners() {\r\n        btnEdit.setOnClickListener(v -> {\r\n            if (mListener != null) {\r\n                mListener.onEditFarm(farm);\r\n            }\r\n        });\r\n\r\n        btnDelete.setOnClickListener(v -> {\r\n            if (mListener != null) {\r\n                mListener.onDeleteFarm(farm);\r\n            }\r\n        });\r\n        \r\n        btnModules.setOnClickListener(v -> {\r\n            if (mListener != null) {\r\n                mListener.onViewFarmModules(farm);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(Context context) {\r\n        super.onAttach(context);\r\n        if (context instanceof OnFragmentInteractionListener) {\r\n            mListener = (OnFragmentInteractionListener) context;\r\n        } else {\r\n            throw new RuntimeException(context\r\n                    + \" must implement OnFragmentInteractionListener\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDetach() {\r\n        super.onDetach();\r\n        mListener = null;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/monitoreoacua/fragments/FarmDetailsFragment.java b/app/src/main/java/com/example/monitoreoacua/fragments/FarmDetailsFragment.java
--- a/app/src/main/java/com/example/monitoreoacua/fragments/FarmDetailsFragment.java	(revision 38418f92d035d32681f01391d8f99a7e4a3fe436)
+++ b/app/src/main/java/com/example/monitoreoacua/fragments/FarmDetailsFragment.java	(date 1745279470933)
@@ -83,7 +83,6 @@
         displayFarmDetails();
         
         setupClickListeners();
-        return view;
     }
 
     private void displayFarmDetails() {
Index: app/src/main/java/com/example/monitoreoacua/fragments/ListFarmsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.monitoreoacua.fragments;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.monitoreoacua.R;\r\nimport com.example.monitoreoacua.business.models.Farm;\r\nimport com.example.monitoreoacua.interfaces.OnApiRequestCallback;\r\nimport com.example.monitoreoacua.service.ApiClient;\r\nimport com.example.monitoreoacua.service.ApiFarmsService;\r\nimport com.example.monitoreoacua.service.request.ListFarmsRequest;\r\nimport com.example.monitoreoacua.service.response.ListFarmResponse;\r\nimport com.example.monitoreoacua.views.farms.FarmAdapter;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n * Fragment for displaying and managing the list of farms\r\n */\r\npublic class ListFarmsFragment extends Fragment {\r\n\r\n    private TextView textViewFarms;\r\n    private RecyclerView recyclerViewFarms;\r\n    private FarmAdapter farmAdapter;\r\n    private EditText editTextSearchFarm;\r\n    private AppCompatImageButton buttonSortByDate;\r\n    private List<Farm> farmsList = new ArrayList<>();\r\n    private boolean isAscending = true;\r\n    private OnFarmSelectedListener farmSelectedListener;\r\n\r\n    private static final String TAG = \"ListFarmsFragment\";\r\n\r\n\r\n    public interface OnFarmSelectedListener {\r\n        void onFarmSelected(Farm farm);\r\n    }\r\n\r\n    public ListFarmsFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n\r\n    public static ListFarmsFragment newInstance() {\r\n        return new ListFarmsFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n        try {\r\n            farmSelectedListener = (OnFarmSelectedListener) context;\r\n        } catch (ClassCastException e) {\r\n            Log.e(TAG, \"Activity must implement OnFarmSelectedListener\", e);\r\n        }\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_list_farms, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        textViewFarms = view.findViewById(R.id.textViewFarms);\r\n        recyclerViewFarms = view.findViewById(R.id.recyclerViewFarms);\r\n        editTextSearchFarm = view.findViewById(R.id.editTextSearchFarm);\r\n        buttonSortByDate = view.findViewById(R.id.buttonSortByDate);\r\n\r\n        recyclerViewFarms.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        farmAdapter = new FarmAdapter();\r\n        recyclerViewFarms.setAdapter(farmAdapter);\r\n\r\n        fetchFarms();\r\n\r\n        farmAdapter.setOnFarmClickListener(farm -> {\r\n            if (farmSelectedListener != null) {\r\n                farmSelectedListener.onFarmSelected(farm);\r\n            } else {\r\n                Toast.makeText(getContext(), \"Error: La actividad no implementa OnFarmSelectedListener\", Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n\r\n        editTextSearchFarm.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                filterFarmsByName(s.toString());\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n\r\n        buttonSortByDate.setOnClickListener(v -> sortFarmsByDate());\r\n        return view;\r\n    }\r\n\r\n    private void fetchFarms() {\r\n        new ListFarmsRequest().fetchFarms(new OnApiRequestCallback<List<Farm>, Throwable>() {\r\n            @Override\r\n            public void onSuccess(List<Farm> data) {\r\n                if (isAdded()) {\r\n                    textViewFarms.setVisibility(View.GONE);\r\n                    farmAdapter.setFarmList(data);\r\n                }\r\n            }\r\n            @Override\r\n            public void onFail(Throwable t) {\r\n                if (isAdded()) {\r\n                    Toast.makeText(getContext(), \"Error de conexión: \" + t.getLocalizedMessage(), Toast.LENGTH_LONG).show();\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void filterFarmsByName(String query) {\r\n        List<Farm> filteredFarms = new ArrayList<>();\r\n        for (Farm farm : farmsList) {\r\n            if (farm.getName().toLowerCase().contains(query.toLowerCase())) {\r\n                filteredFarms.add(farm);\r\n            }\r\n        }\r\n        farmAdapter.setFarmList(filteredFarms);\r\n    }\r\n\r\n    private void sortFarmsByDate() {\r\n        if (farmsList.isEmpty()) return;\r\n\r\n        Collections.sort(farmsList, (f1, f2) -> isAscending\r\n                ? f1.getCreatedAt().compareTo(f2.getCreatedAt())\r\n                : f2.getCreatedAt().compareTo(f1.getCreatedAt()));\r\n\r\n        isAscending = !isAscending;\r\n        farmAdapter.setFarmList(farmsList);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/monitoreoacua/fragments/ListFarmsFragment.java b/app/src/main/java/com/example/monitoreoacua/fragments/ListFarmsFragment.java
--- a/app/src/main/java/com/example/monitoreoacua/fragments/ListFarmsFragment.java	(revision 38418f92d035d32681f01391d8f99a7e4a3fe436)
+++ b/app/src/main/java/com/example/monitoreoacua/fragments/ListFarmsFragment.java	(date 1745279489928)
@@ -121,7 +121,6 @@
         });
 
         buttonSortByDate.setOnClickListener(v -> sortFarmsByDate());
-        return view;
     }
 
     private void fetchFarms() {
Index: app/src/main/java/com/example/monitoreoacua/fragments/ListMeasurementsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.monitoreoacua.fragments;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.example.monitoreoacua.R;\r\nimport com.example.monitoreoacua.business.models.Measurement;\r\nimport com.example.monitoreoacua.service.ApiClient;\r\nimport com.example.monitoreoacua.service.ApiMeasurementsService;\r\nimport com.example.monitoreoacua.service.request.ListMeasurementRequest;\r\nimport com.example.monitoreoacua.service.response.ListMeasurementResponse;\r\nimport com.example.monitoreoacua.views.measurements.MeasurementsAdapter;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n * Fragment for displaying a list of measurements\r\n * Based on the pattern of ListModulesFragment\r\n */\r\npublic class ListMeasurementsFragment extends Fragment implements MeasurementsAdapter.OnMeasurementClickListener {\r\n\r\n    private static final String TAG = \"ListMeasurementsFragment\";\r\n\r\n    private RecyclerView recyclerViewMeasurements;\r\n    private SwipeRefreshLayout swipeRefreshLayout;\r\n    private TextView tvEmptyView;\r\n    private ProgressBar progressBar;\r\n    private MeasurementsAdapter measurementAdapter;\r\n\r\n    private String moduleId;\r\n\r\n    private OnMeasurementInteractionListener listener;\r\n\r\n    /**\r\n     * Interface for handling measurement interactions\r\n     */\r\n    public interface OnMeasurementInteractionListener {\r\n        void onMeasurementSelected(Measurement measurement);\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of ListMeasurementsFragment with moduleId\r\n     *\r\n     * @param moduleId The ID of the module to fetch measurements for\r\n     * @return A new instance of ListMeasurementsFragment\r\n     */\r\n    public static ListMeasurementsFragment newInstance(String moduleId) {\r\n        ListMeasurementsFragment fragment = new ListMeasurementsFragment();\r\n        Bundle args = new Bundle();\r\n        args.putString(\"moduleId\", moduleId);\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        if (getArguments() != null) {\r\n            moduleId = getArguments().getString(\"moduleId\");\r\n            Log.d(TAG, \"moduleId: \" + moduleId);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_list_measurements, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        // Initialize views\r\n        recyclerViewMeasurements = view.findViewById(R.id.recyclerViewMeasurements);\r\n        progressBar = view.findViewById(R.id.progressBar);\r\n        swipeRefreshLayout = view.findViewById(R.id.swipeRefreshLayout);\r\n        tvEmptyView = view.findViewById(R.id.tvEmptyView);\r\n\r\n        // Set up RecyclerView\r\n        // Set up RecyclerView\r\n        recyclerViewMeasurements.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        measurementAdapter = new MeasurementsAdapter();\r\n        measurementAdapter.setOnMeasurementClickListener(this);\r\n        recyclerViewMeasurements.setAdapter(measurementAdapter);\r\n        // Set up SwipeRefreshLayout\r\n        swipeRefreshLayout.setOnRefreshListener(this::fetchMeasurements);\r\n\r\n        // Fetch measurements data\r\n        fetchMeasurements();\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n        try {\r\n            listener = (OnMeasurementInteractionListener) context;\r\n        } catch (ClassCastException e) {\r\n            throw new ClassCastException(context + \" must implement OnMeasurementInteractionListener\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onMeasurementClick(Measurement measurement) {\r\n        if (listener != null) {\r\n            listener.onMeasurementSelected(measurement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch measurements from the API\r\n     */\r\n    private void fetchMeasurements() {\r\n        progressBar.setVisibility(View.VISIBLE);\r\n        recyclerViewMeasurements.setVisibility(View.GONE);\r\n        tvEmptyView.setVisibility(View.GONE);\r\n\r\n        // Validar moduleId antes de hacer la llamada\r\n        if (moduleId == null || moduleId.isEmpty()) {\r\n            showError(\"Error: ID del módulo no válido\");\r\n            Log.e(TAG, \"Error: moduleId es nulo o vacío\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            int moduleIdInt = Integer.parseInt(moduleId);\r\n            \r\n            // Crear API service\r\n            ApiMeasurementsService apiService = ApiClient.getClient().create(ApiMeasurementsService.class);\r\n            ListMeasurementRequest listMeasurementsRequest = new ListMeasurementRequest();\r\n            \r\n            // Obtener y verificar token\r\n            String authToken = listMeasurementsRequest.getAuthToken();\r\n            if (authToken == null || authToken.isEmpty()) {\r\n                showError(\"Error: Token de autorización no válido\");\r\n                Log.e(TAG, \"Error: token de autorización es nulo o vacío\");\r\n                return;\r\n            }\r\n            \r\n            // Log para depuración\r\n            Log.d(TAG, \"Realizando petición con moduleId: \" + moduleIdInt);\r\n            Log.d(TAG, \"Petición a endpoint: /api/v2/module/measurement?moduleId=\" + moduleIdInt);\r\n            Log.d(TAG, \"Token (primeros 10 caracteres): \" + \r\n                    (authToken.length() > 10 ? authToken.substring(0, 10) + \"...\" : authToken));\r\n            \r\n            // Hacer llamada a la API\r\n            Call<ListMeasurementResponse> call = apiService.getMeasurements(\r\n                    moduleIdInt,\r\n                    authToken\r\n            );\r\n            \r\n            call.enqueue(new Callback<ListMeasurementResponse>() {\r\n                @Override\r\n                public void onResponse(@NonNull Call<ListMeasurementResponse> call, @NonNull Response<ListMeasurementResponse> response) {\r\n                    progressBar.setVisibility(View.GONE);\r\n                    swipeRefreshLayout.setRefreshing(false);\r\n                    \r\n                    // Log de la respuesta completa\r\n                    Log.d(TAG, \"Respuesta recibida - Código: \" + response.code());\r\n                    Log.d(TAG, \"URL de la petición: \" + call.request().url());\r\n                    \r\n                    if (response.isSuccessful() && response.body() != null) {\r\n                        Log.d(TAG, \"Respuesta exitosa\");\r\n                        ListMeasurementResponse measurementResponse = response.body();\r\n                        List<Measurement> measurements = measurementResponse.getData();\r\n                        \r\n                        // Update UI based on response\r\n                        if (measurements != null && !measurements.isEmpty()) {\r\n                            Log.d(TAG, \"Se recibieron \" + measurements.size() + \" mediciones\");\r\n                            measurementAdapter.setMeasurementList(measurements);\r\n                            recyclerViewMeasurements.setVisibility(View.VISIBLE);\r\n                            tvEmptyView.setVisibility(View.GONE);\r\n                        } else {\r\n                            Log.d(TAG, \"No se recibieron mediciones\");\r\n                            measurementAdapter.setMeasurementList(new ArrayList<>());\r\n                            recyclerViewMeasurements.setVisibility(View.GONE);\r\n                            tvEmptyView.setVisibility(View.VISIBLE);\r\n                            tvEmptyView.setText(R.string.empty_measurements_list);\r\n                        }\r\n                    } else {\r\n                        // Manejo específico de códigos de error\r\n                        String errorMsg;\r\n                        switch (response.code()) {\r\n                            case 400:\r\n                                errorMsg = \"Error: Solicitud incorrecta. Verifica los parámetros.\";\r\n                                Log.e(TAG, \"Error 400: Parámetros de la solicitud incorrectos\");\r\n                                break;\r\n                            case 401:\r\n                                errorMsg = \"Error: No autorizado. Por favor inicia sesión nuevamente.\";\r\n                                Log.e(TAG, \"Error 401: Token de autorización no válido\");\r\n                                break;\r\n                            case 403:\r\n                                errorMsg = \"Error: Acceso denegado. No tienes permisos para ver estas mediciones.\";\r\n                                Log.e(TAG, \"Error 403: Permisos insuficientes\");\r\n                                break;\r\n                            case 404:\r\n                                errorMsg = \"Error: Módulo no encontrado. Verifica que el módulo exista.\";\r\n                                Log.e(TAG, \"Error 404: Módulo \" + moduleId + \" no encontrado\");\r\n                                break;\r\n                            case 500:\r\n                                errorMsg = \"Error: Problema en el servidor. Inténtalo más tarde.\";\r\n                                Log.e(TAG, \"Error 500: Error interno del servidor\");\r\n                                break;\r\n                            default:\r\n                                errorMsg = \"Error al obtener las mediciones. Código: \" + response.code();\r\n                                Log.e(TAG, \"Error \" + response.code() + \": \" + response.message());\r\n                                break;\r\n                        }\r\n                        Log.e(TAG, \"Error al obtener las mediciones: \" + response.toString());\r\n                        showError(errorMsg);\r\n                    }\r\n                }\r\n                \r\n                @Override\r\n                public void onFailure(@NonNull Call<ListMeasurementResponse> call, @NonNull Throwable t) {\r\n                    progressBar.setVisibility(View.GONE);\r\n                    swipeRefreshLayout.setRefreshing(false);\r\n                    \r\n                    // Mensajes específicos según el tipo de error\r\n                    String errorMsg;\r\n                    if (t instanceof java.net.UnknownHostException) {\r\n                        errorMsg = \"Error: No hay conexión a Internet o el servidor no está disponible.\";\r\n                        Log.e(TAG, \"Error de host desconocido: No hay conexión a Internet\", t);\r\n                    } else if (t instanceof java.net.SocketTimeoutException) {\r\n                        errorMsg = \"Error: Tiempo de espera agotado. El servidor tardó demasiado en responder.\";\r\n                        Log.e(TAG, \"Error de timeout: El servidor tardó demasiado en responder\", t);\r\n                    } else {\r\n                        errorMsg = \"Error de conexión: \" + t.getMessage();\r\n                        Log.e(TAG, \"Error de conexión\", t);\r\n                    }\r\n                    showError(errorMsg);\r\n                }\r\n            });\r\n        } catch (NumberFormatException e) {\r\n            showError(\"Error: El ID del módulo debe ser un número válido\");\r\n            Log.e(TAG, \"Error al convertir moduleId a entero: \" + moduleId, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show error message and update UI\r\n     *\r\n     * @param message The error message to display\r\n     */\r\n    private void showError(String message) {\r\n        Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();\r\n        recyclerViewMeasurements.setVisibility(View.GONE);\r\n        tvEmptyView.setVisibility(View.VISIBLE);\r\n        tvEmptyView.setText(R.string.error_loading_measurements);\r\n    }\r\n\r\n    /**\r\n     * Refresh measurements data\r\n     * Called from outside the fragment to refresh the list\r\n     */\r\n    public void refreshMeasurements() {\r\n        fetchMeasurements();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/monitoreoacua/fragments/ListMeasurementsFragment.java b/app/src/main/java/com/example/monitoreoacua/fragments/ListMeasurementsFragment.java
--- a/app/src/main/java/com/example/monitoreoacua/fragments/ListMeasurementsFragment.java	(revision 38418f92d035d32681f01391d8f99a7e4a3fe436)
+++ b/app/src/main/java/com/example/monitoreoacua/fragments/ListMeasurementsFragment.java	(date 1745279506076)
@@ -107,7 +107,6 @@
 
         // Fetch measurements data
         fetchMeasurements();
-        return view;
     }
 
     @Override
Index: app/src/main/java/com/example/monitoreoacua/fragments/ListNotificationsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.monitoreoacua.fragments;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.EditText;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.example.monitoreoacua.R;\r\nimport com.example.monitoreoacua.business.models.Notification;\r\nimport com.example.monitoreoacua.service.ApiClient;\r\nimport com.example.monitoreoacua.service.ApiNotificationsService;\r\nimport com.example.monitoreoacua.service.request.ListNotificationRequest;\r\nimport com.example.monitoreoacua.service.response.ApiResponse;\r\nimport com.example.monitoreoacua.service.response.ListNotificationResponse;\r\nimport com.example.monitoreoacua.views.notifications.NotificationAdapter;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n * Fragment for displaying and managing notifications\r\n */\r\n/**\r\n * Fragment for displaying and managing notifications\r\n */\r\npublic class ListNotificationsFragment extends Fragment {\r\n\r\n    private static final String TAG = \"ListNotificationsFrag\";\r\n    // We don't hardcode ITEMS_PER_PAGE anymore as we get this from the API's metadata\r\n\r\n    private RecyclerView recyclerViewNotifications;\r\n    private NotificationAdapter notificationAdapter;\r\n    private SwipeRefreshLayout swipeRefreshLayout;\r\n    private ProgressBar progressBar;\r\n    private TextView tvEmptyView;\r\n    private EditText editTextSearch;\r\n    private AppCompatImageButton buttonSortByDate;\r\n\r\n    private List<Notification> notificationsList = new ArrayList<>();\r\n    private boolean isAscending = false;\r\n    private int currentPage = 1;\r\n    private boolean isLoading = false;\r\n    private boolean hasMorePages = true;\r\n    private String searchQuery = \"\";\r\n    private int perPage = 20; // Default value, will be updated from API response\r\n    private int totalPages = 0;\r\n    private int totalItems = 0;\r\n    private boolean isRemoteSearch = false;\r\n    private OnNotificationSelectedListener notificationSelectedListener;\r\n\r\n    public interface OnNotificationSelectedListener {\r\n        void onNotificationSelected(Notification notification);\r\n    }\r\n    \r\n    public ListNotificationsFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static ListNotificationsFragment newInstance() {\r\n        return new ListNotificationsFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n        try {\r\n            notificationSelectedListener = (OnNotificationSelectedListener) context;\r\n        } catch (ClassCastException e) {\r\n            Log.e(TAG, \"Activity must implement OnNotificationSelectedListener\", e);\r\n        }\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_list_notifications, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        recyclerViewNotifications = view.findViewById(R.id.recyclerViewNotifications);\r\n        swipeRefreshLayout = view.findViewById(R.id.swipeRefreshLayout);\r\n        progressBar = view.findViewById(R.id.progressBar);\r\n        tvEmptyView = view.findViewById(R.id.tvEmptyView);\r\n        editTextSearch = view.findViewById(R.id.searchNotifications);\r\n        buttonSortByDate = view.findViewById(R.id.buttonSortNotifications);\r\n\r\n        // Setup RecyclerView\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());\r\n        recyclerViewNotifications.setLayoutManager(layoutManager);\r\n        \r\n        // Initialize adapter with the standalone implementation\r\n        notificationAdapter = new NotificationAdapter(requireContext(), notification -> {\r\n            if (notificationSelectedListener != null) {\r\n                notificationSelectedListener.onNotificationSelected(notification);\r\n            } else {\r\n                Toast.makeText(getContext(), \"Error: La actividad no implementa OnNotificationSelectedListener\", Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n        recyclerViewNotifications.setAdapter(notificationAdapter);\r\n\r\n        // Pull to refresh\r\n        swipeRefreshLayout.setOnRefreshListener(this::refreshNotifications);\r\n\r\n        // Sort button\r\n        buttonSortByDate.setOnClickListener(v -> sortNotificationsByDate());\r\n\r\n        // Search functionality\r\n        editTextSearch.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                searchQuery = s.toString();\r\n                filterNotifications(searchQuery);\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n\r\n        // Pagination scroll listener\r\n        recyclerViewNotifications.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n\r\n                if (dy > 0) { // Scrolling down\r\n                    int visibleItemCount = layoutManager.getChildCount();\r\n                    int totalItemCount = layoutManager.getItemCount();\r\n                    int firstVisibleItemPosition = layoutManager.findFirstVisibleItemPosition();\r\n\r\n                    if (!isLoading && hasMorePages) {\r\n                        if ((visibleItemCount + firstVisibleItemPosition) >= totalItemCount\r\n                                && firstVisibleItemPosition >= 0) {\r\n                            // Load more items\r\n                            // Post to next frame to avoid IllegalStateException during scroll callback\r\n                            recyclerViewNotifications.post(() -> loadMoreNotifications());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Initial data load\r\n        fetchNotifications();\r\n        return view;\r\n    }\r\n\r\n    private void fetchNotifications() {\r\n        Log.d(TAG, \"fetchNotifications: Starting to fetch notifications\");\r\n        showLoading();\r\n        currentPage = 1;\r\n        hasMorePages = true;\r\n        notificationsList.clear();\r\n        Log.d(TAG, \"fetchNotifications: Reset state - currentPage=\" + currentPage + \", hasMorePages=\" + hasMorePages);\r\n\r\n        ApiNotificationsService apiService = ApiClient.getClient().create(ApiNotificationsService.class);\r\n        ListNotificationRequest listNotificationRequest = new ListNotificationRequest();\r\n\r\n        Call<ListNotificationResponse> call;\r\n        if (!searchQuery.isEmpty() && isRemoteSearch) {\r\n            // Use the search parameter for remote filtering if enabled\r\n            call = apiService.getNotifications(\r\n                    listNotificationRequest.getAuthToken(), \r\n                    1, \r\n                    searchQuery,\r\n                    null); // Use API default limit\r\n        } else {\r\n            // Use standard call without search\r\n            call = apiService.getNotifications(listNotificationRequest.getAuthToken(), 1);\r\n        }\r\n\r\n        Log.d(TAG, \"fetchNotifications: Making API call with parameters - page=\" + 1 + \r\n                  \", searchQuery=\" + (searchQuery.isEmpty() ? \"empty\" : searchQuery) + \r\n                  \", isRemoteSearch=\" + isRemoteSearch);\r\n\r\n        call.enqueue(new Callback<ListNotificationResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<ListNotificationResponse> call, @NonNull Response<ListNotificationResponse> response) {\r\n                Log.d(TAG, \"onResponse: Received API response with status code: \" + response.code());\r\n                hideLoading();\r\n\r\n                if (isAdded()) { // Check if fragment is still attached to activity\r\n                    if (response.isSuccessful() && response.body() != null) {\r\n                        Log.d(TAG, \"onResponse: API response is successful\");\r\n                        ListNotificationResponse notificationResponse = response.body();\r\n                        List<Notification> notifications = notificationResponse.getAllNotification();\r\n                        \r\n                        Log.d(TAG, \"onResponse: Retrieved response body, notifications list is \" + \r\n                                  (notifications == null ? \"null\" : \r\n                                   (notifications.isEmpty() ? \"empty\" : \"available with \" + notifications.size() + \" items\")));\r\n\r\n                        if (notifications != null && !notifications.isEmpty()) {\r\n                            notificationsList.addAll(notifications);\r\n                            notificationAdapter.setNotifications(notificationsList);\r\n\r\n                            // Check pagination info\r\n                            if (notificationResponse.getMeta() != null) {\r\n                                ApiResponse.Meta meta = notificationResponse.getMeta();\r\n                                currentPage = meta.getCurrentPage();\r\n                                hasMorePages = (meta.getTotalPages() - meta.getCurrentPage())  != 0;\r\n                                perPage = meta.getItemsPerPage();\r\n                                totalPages = meta.getTotalPages();\r\n                                totalItems = meta.getTotalItems();\r\n                                Log.d(TAG, \"hasMorePages: \" +  hasMorePages);\r\n                            }\r\n\r\n                            showContent();\r\n                            Log.d(TAG, \"onResponse: Successfully displayed notifications - count: \" + notificationsList.size());\r\n                        } else {\r\n                            Log.w(TAG, \"onResponse: Notifications list is empty or null\");\r\n                            showEmptyState(getString(R.string.no_notifications_found));\r\n                        }\r\n                    } else {\r\n                        Log.e(TAG, \"onResponse: API response was not successful - status code: \" + response.code());\r\n                        handleApiError(response);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<ListNotificationResponse> call, @NonNull Throwable t) {\r\n                Log.e(TAG, \"onFailure: API call failed\", t);\r\n                Log.e(TAG, \"onFailure: Detailed error message: \" + t.getMessage());\r\n                Log.e(TAG, \"onFailure: Error type: \" + t.getClass().getName());\r\n                hideLoading();\r\n                showError(\"Error de conexión: \" + t.getLocalizedMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void loadMoreNotifications() {\r\n        if (isLoading || !hasMorePages) {\r\n            // Show a message if there are no more pages\r\n            if (!hasMorePages && !isLoading) {\r\n                if (isAdded()) {\r\n                    Toast.makeText(getContext(), \"No hay más notificaciones para cargar\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        isLoading = true;\r\n        currentPage++;\r\n\r\n        // Show a loading indicator at the bottom of the list\r\n        notificationAdapter.setLoadingMore(true);\r\n\r\n        ApiNotificationsService apiService = ApiClient.getClient().create(ApiNotificationsService.class);\r\n        ListNotificationRequest listNotificationRequest = new ListNotificationRequest();\r\n\r\n        Call<ListNotificationResponse> call;\r\n        if (!searchQuery.isEmpty() && isRemoteSearch) {\r\n            // Use the search parameter for remote filtering if enabled\r\n            call = apiService.getNotifications(\r\n                    listNotificationRequest.getAuthToken(), \r\n                    currentPage, \r\n                    searchQuery,\r\n                    null); // Use API default limit\r\n        } else {\r\n            // Use standard call without search\r\n            call = apiService.getNotifications(\r\n                    listNotificationRequest.getAuthToken(),\r\n                    currentPage\r\n            );\r\n        }\r\n\r\n        call.enqueue(new Callback<ListNotificationResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<ListNotificationResponse> call, @NonNull Response<ListNotificationResponse> response) {\r\n                isLoading = false;\r\n                notificationAdapter.setLoadingMore(false);\r\n\r\n                if (isAdded() && response.isSuccessful() && response.body() != null) {\r\n                    ListNotificationResponse notificationResponse = response.body();\r\n                    List<Notification> newNotifications = notificationResponse.getAllNotification();\r\n\r\n                    if (newNotifications != null && !newNotifications.isEmpty()) {\r\n                        int prevSize = notificationsList.size();\r\n                        notificationsList.addAll(newNotifications);\r\n                        notificationAdapter.setNotifications(notificationsList);\r\n\r\n                        // Check pagination info\r\n                        if (notificationResponse.getMeta() != null) {\r\n                            ApiResponse.Meta meta = notificationResponse.getMeta();\r\n                            currentPage = meta.getCurrentPage();\r\n                            hasMorePages = meta.getTotalPages() - meta.getCurrentPage() == 0;\r\n                            perPage = meta.getItemsPerPage();\r\n                            totalPages = meta.getTotalPages();\r\n                            totalItems = meta.getTotalItems();\r\n                            \r\n                            // Update pagination feedback\r\n                        } else {\r\n                            hasMorePages = false;\r\n                            if (isAdded()) {\r\n                                Toast.makeText(getContext(), \"No hay más notificaciones disponibles\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n                    } else {\r\n                        hasMorePages = false;\r\n                        if (isAdded()) {\r\n                            Toast.makeText(getContext(), \"No hay más notificaciones disponibles\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                } else {\r\n                    hasMorePages = false;\r\n                    if (isAdded()) {\r\n                        String errorMessage = \"Error al cargar más notificaciones\";\r\n                        if (response.errorBody() != null) {\r\n                            try {\r\n                                errorMessage += \": Error de servidor\";\r\n                            } catch (Exception e) {\r\n                                errorMessage += \": Código \" + response.code();\r\n                            }\r\n                        }\r\n                        Toast.makeText(getContext(), errorMessage, Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n            }\r\n            @Override\r\n            public void onFailure(@NonNull Call<ListNotificationResponse> call, @NonNull Throwable t) {\r\n                isLoading = false;\r\n                notificationAdapter.setLoadingMore(false);\r\n                currentPage--; // Revert page increment since request failed\r\n                String errorMessage = \"Error al cargar más notificaciones: Fallo en la conexión\";\r\n                Log.e(TAG, errorMessage + \": \" + t.getLocalizedMessage(), t);\r\n                if (isAdded()) {\r\n                    Toast.makeText(getContext(), errorMessage, Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void refreshNotifications() {\r\n        swipeRefreshLayout.setRefreshing(true);\r\n        fetchNotifications();\r\n    }\r\n\r\n    private void filterNotifications(String query) {\r\n        searchQuery = query;\r\n        \r\n        // If remote search is enabled and the query is not empty, fetch from server\r\n        if (isRemoteSearch && !query.isEmpty()) {\r\n            fetchNotifications(); // This will use the searchQuery in the API call\r\n            return;\r\n        }\r\n        \r\n        // Otherwise, perform local filtering\r\n        if (notificationsList.isEmpty()) return;\r\n\r\n        if (query.isEmpty()) {\r\n            notificationAdapter.setNotifications(notificationsList);\r\n            showContent();\r\n            return;\r\n        }\r\n\r\n        List<Notification> filteredList = new ArrayList<>();\r\n        for (Notification notification : notificationsList) {\r\n            if (notification.getTitle().toLowerCase().contains(query.toLowerCase()) ||\r\n                    notification.getMessage().toLowerCase().contains(query.toLowerCase())) {\r\n                filteredList.add(notification);\r\n            }\r\n        }\r\n\r\n        notificationAdapter.setNotifications(filteredList);\r\n\r\n        if (filteredList.isEmpty()) {\r\n            showEmptyState(\"No se encontraron notificaciones que coincidan con la búsqueda\");\r\n        } else {\r\n            showContent();\r\n        }\r\n    }\r\n\r\n    private void sortNotificationsByDate() {\r\n        if (notificationsList.isEmpty()) return;\r\n\r\n        List<Notification> currentList = new ArrayList<>(notificationAdapter.getNotifications());\r\n\r\n        // Sort by dateHour from the notification data\r\n        Collections.sort(currentList, new Comparator<Notification>() {\r\n            @Override\r\n            public int compare(Notification n1, Notification n2) {\r\n                String date1 = n1.getData().getDateHour();\r\n                String date2 = n2.getData().getDateHour();\r\n\r\n                if (isAscending) {\r\n                    return date1.compareTo(date2);\r\n                } else {\r\n                    return date2.compareTo(date1);\r\n                }\r\n            }\r\n        });\r\n\r\n        isAscending = !isAscending;\r\n        notificationAdapter.setNotifications(currentList);\r\n    }\r\n\r\n    private void showLoading() {\r\n        if (!isAdded()) return;\r\n        progressBar.setVisibility(View.VISIBLE);\r\n        tvEmptyView.setVisibility(View.GONE);\r\n        recyclerViewNotifications.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void hideLoading() {\r\n        if (!isAdded()) return;\r\n        progressBar.setVisibility(View.GONE);\r\n        swipeRefreshLayout.setRefreshing(false);\r\n    }\r\n\r\n    private void showContent() {\r\n        if (!isAdded()) return;\r\n        recyclerViewNotifications.setVisibility(View.VISIBLE);\r\n        tvEmptyView.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void showEmptyState(String message) {\r\n        if (!isAdded()) return;\r\n        recyclerViewNotifications.setVisibility(View.GONE);\r\n        tvEmptyView.setVisibility(View.VISIBLE);\r\n        tvEmptyView.setText(message);\r\n    }\r\n\r\n    private void showError(String message) {\r\n        if (!isAdded()) return;\r\n        Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();\r\n        showEmptyState(getString(R.string.error_loading_notifications));\r\n    }\r\n\r\n    private void handleApiError(Response<ListNotificationResponse> response) {\r\n        String errorMessage;\r\n        try {\r\n            if (response.errorBody() != null) {\r\n                String errorBody = response.errorBody().string();\r\n                Log.e(TAG, \"handleApiError: Error body: \" + errorBody);\r\n                errorMessage = \"Error en la respuesta del servidor\";\r\n            } else {\r\n                Log.e(TAG, \"handleApiError: No error body available\");\r\n                errorMessage = \"Error desconocido\";\r\n            }\r\n        } catch (Exception e) {\r\n            Log.e(TAG, \"handleApiError: Exception while reading error body\", e);\r\n            errorMessage = \"Error \" + response.code();\r\n        }\r\n\r\n        showError(\"Error: \" + errorMessage);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/monitoreoacua/fragments/ListNotificationsFragment.java b/app/src/main/java/com/example/monitoreoacua/fragments/ListNotificationsFragment.java
--- a/app/src/main/java/com/example/monitoreoacua/fragments/ListNotificationsFragment.java	(revision 38418f92d035d32681f01391d8f99a7e4a3fe436)
+++ b/app/src/main/java/com/example/monitoreoacua/fragments/ListNotificationsFragment.java	(date 1745279521200)
@@ -174,7 +174,6 @@
 
         // Initial data load
         fetchNotifications();
-        return view;
     }
 
     private void fetchNotifications() {
